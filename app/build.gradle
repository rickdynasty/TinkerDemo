import java.text.SimpleDateFormat

apply plugin: 'com.android.application'

def javaVersion = JavaVersion.VERSION_1_7
android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildtools

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    //recommend
    dexOptions {
        jumboMode = true
    }


    defaultConfig {
        applicationId "com.rick.tinker.demo"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "MESSAGE", "\"I am the base apk\""

        buildConfigField "String", "TINKER_ID", "\"${getTinkerIdValue()}\""
        buildConfigField "String", "PLATFORM", "\"all\""
    }

    signingConfigs {
        release {
            try {
                storeFile file("./keystore/TinkerDemo.keystore")
                storePassword "TinkerDemo"
                keyAlias "TinkerDemo"
                keyPassword "TinkerDemo"
            } catch (ex) {
                throw new InvalidUserDataException(ex.toString())
            }
        }

        debug {
            storeFile file("./keystore/TinkerDemo.keystore")
            storePassword "TinkerDemo"
            keyAlias "TinkerDemo"
            keyPassword "TinkerDemo"
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "com.android.support:appcompat-v7:23.1.1"
    testCompile 'junit:junit:4.12'

    //可选，用于生成application类
    compile("com.tencent.tinker:tinker-android-lib:${TINKER_VERSION}") { changing = true }
    //tinker的核心库
    provided("com.tencent.tinker:tinker-android-anno:${TINKER_VERSION}") { changing = true }
    compile "com.android.support:multidex:1.0.1"
}

def gitSha() {
    try {
        // String gitRev = 'git rev-parse --short HEAD'.execute(null, project.rootDir).text.trim()
        String gitRev = "1008611"
        if (gitRev == null) {
            throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
        }
        return gitRev
    } catch (Exception e) {
        throw new GradleException("can't get git rev, you should add git to system path or just input test value, such as 'testTinkerId'")
    }
}

def tinkerOutPath = file("${buildDir}/tinkerOutputs/")

ext {
    //for some reason, you may want to ignore tinkerBuild, such as instant run debug build?
    tinkerEnabled = true

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${tinkerOutPath}/app_1.0.180328.100_release_10000.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${tinkerOutPath}/app_1.0.180328.100_release_10000_mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${tinkerOutPath}/app_1.0.180328.100_release_10000_R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${tinkerOutPath}/app-0421-18-03-28"
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    //apply tinker插件
    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {
        /**
         * 默认为null
         * 将旧的apk和新的apk建立关联
         * 从build / tinkerOutputs添加apk
         */
        oldApk = getOldApkPath()
        /**
         * 可选，默认'false'
         * 有些情况下我们可能会收到一些警告
         * 如果ignoreWarning为true，我们只是断言补丁过程
         * case 1：minSdkVersion低于14，但是你使用dexMode与raw。
         * case 2：在AndroidManifest.xml中新添加Android组件，
         * case 3：装载器类在dex.loader {}不保留在主要的dex，
         * 它必须让tinker不工作。
         * case 4：在dex.loader {}中的loader类改变，
         * 加载器类是加载补丁dex。改变它们是没有用的。
         * 它不会崩溃，但这些更改不会影响。你可以忽略它
         * case 5：resources.arsc已经改变，但是我们不使用applyResourceMapping来构建
         */
        ignoreWarning = false

        /**
         * 可选，默认为“true”
         * 是否签名补丁文件
         * 如果没有，你必须自己做。否则在补丁加载过程中无法检查成功
         * 我们将使用sign配置与您的构建类型
         */
        useSign = true

        /**
         可选，默认为“true”
         是否使用tinker构建
         */
        tinkerEnable = buildWithTinker()

        /**
         * 警告，applyMapping会影响正常的android build！
         */
        buildConfig {
            /**
             * 可选，默认为'null'
             * 如果我们使用tinkerPatch构建补丁apk，你最好应用旧的
             * apk映射文件如果minifyEnabled是启用！
             * 警告：你必须小心，它会影响正常的组装构建！
             */
            applyMapping = getApplyMappingPath()
            /**
             * 可选，默认为'null'
             * 很高兴保持资源ID从R.txt文件，以减少java更改
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * 必需，默认'null'
             * 因为我们不想检查基地apk与md5在运行时（它是慢）
             * tinkerId用于在试图应用补丁时标识唯一的基本apk。
             * 我们可以使用git rev，svn rev或者简单的versionCode。
             * 我们将在您的清单中自动生成tinkerId
             */
            tinkerId = getTinkerIdValue()

            /**
             * 如果keepDexApply为true，则表示dex指向旧apk的类。
             * 打开这可以减少dex diff文件大小。
             */
            keepDexApply = false
        }

        dex {
            /**
             * 可选，默认'jar'
             * 只能是'raw'或'jar'。对于原始，我们将保持其原始格式
             * 对于jar，我们将使用zip格式重新包装dexes。
             * 如果你想支持下面14，你必须使用jar
             * 或者你想保存rom或检查更快，你也可以使用原始模式
             */
            dexMode = "jar"

            /**
             * 必需，默认'[]'
             * apk中的dexes应该处理tinkerPatch
             * 它支持*或？模式。
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * 必需，默认'[]'
             * 警告，这是非常非常重要的，加载类不能随补丁改变。
             * 因此，它们将从补丁程序中删除。
             * 你必须把下面的类放到主要的dex。
             * 简单地说，你应该添加自己的应用程序{@code com.rick.tinker.demo.TheApplication}
             * 自己的tinkerLoader，和你使用的类
             *
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    "com.rick.tinker.demo.app.BaseBuildInfo"
            ]
        }

        lib {
            /**
             可选，默认'[]'
             apk中的图书馆应该处理tinkerPatch
             它支持*或？模式。
             对于资源库，我们只是在补丁目录中恢复它们
             你可以得到他们在TinkerLoadResult与Tinker
             */
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            /**
             * 可选，默认'[]'
             * apk中的什么资源应该处理tinkerPatch
             * 它支持*或？模式。
             * 你必须包括你在这里的所有资源，
             * 否则，他们不会重新包装在新的apk资源。
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * 可选，默认'[]'
             * 资源文件排除模式，忽略添加，删除或修改资源更改
             * *它支持*或？模式。
             * *警告，我们只能使用文件没有relative与resources.arsc
             */
            ignoreChange = ["assets/test_meta.txt"]

            /**
             * 默认100kb
             * *对于修改资源，如果它大于'largeModSize'
             * *我们想使用bsdiff算法来减少补丁文件的大小
             */
            largeModSize = 100
        }

        packageConfig {
            /**
             * 可选，默认'TINKER_ID，TINKER_ID_VALUE'，'NEW_TINKER_ID，NEW_TINKER_ID_VALUE'
             * 包元文件gen。路径是修补程序文件中的assets / package_meta.txt
             * 你可以在您自己的PackageCheck方法中使用securityCheck.getPackageProperties（）
             * 或TinkerLoadResult.getPackageConfigByName
             * 我们将从旧的apk清单为您自动获取TINKER_ID，
             * 其他配置文件（如下面的patchMessage）不是必需的
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * 只是一个例子，你可以使用如sdkVersion，品牌，渠道...
             * 你可以在SamplePatchListener中解析它。
             * 然后你可以使用补丁条件！
             */
            configField("platform", "all")
            /**
             * 补丁版本通过packageConfig
             */
            configField("patchVersion", "1.0")
        }
        //或者您可以添加外部的配置文件，或从旧apk获取元值
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * 如果你不使用zipArtifact或者path，我们只是使用7za来试试
         */
        sevenZip {
            /**
             * 可选，默认'7za'
             * 7zip工件路径，它将使用正确的7za与您的平台
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * 可选，默认'7za'
             * 你可以自己指定7za路径，它将覆盖zipArtifact值
             */
//        path = "/usr/local/bin/7za"
        }
    }

    //渠道
    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }

    boolean hasFlavors = flavors.size() > 0

    /**
     * bak apk and mapping
     * 自定义输出内容的名称(apk等)
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("yyMMdd")//"MMdd-HH-mm-ss"

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${project.name}_${versionName}_${variant.baseName}_${rootProject.ext.channelId}"

                        def destPath = hasFlavors ? file("${tinkerOutPath}/${project.name}_${date}/${variant.flavorName}") : tinkerOutPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}_mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}_R.txt")
                        }
                    }
                }
            }
        }
    }

    /**
     * gradle提供了对project状态配置监听的接口回调,以方便我们来配置一些Project的配置属性,监听主要分为两大类:
     * 一种是通过project进行 回调，一种是通过gradle进行回调.
     * 作用域也有不同 ,project是只针对当前project实现进行的监听,gradle监听是针对于所有的project而言的。
     *
     * Project api给我们提供了两个方法对当前project配置状态进行回调afterEvaluate(project开始配置前调用)和
     *  beforeEvaluate,afterEvaluate(project配置完成后回调)，
     *  需要注意的我们所说的添加的代码块回调可以添加多次，运行顺序按照添加的顺序执行(同样使用于下面所说的所有回调).
     *
     * 参考：https://blog.csdn.net/chf1142152101/article/details/72830565
     */
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_release_mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_release_R.txt"
                    }
                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_debug_mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}_${flavorName}_debug_R.txt"
                    }

                }
            }
        }
    }
}
